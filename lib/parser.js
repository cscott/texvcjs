// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "t";
  var peg$c1 = "e";
  var peg$c2 = "e1";
  var peg$c3 = "name";
  var peg$c4 = "e2";
  var peg$c5 = "h";
  var peg$c6 = "d";
  var peg$c7 = "l1";
  var peg$c8 = "l2";
  var peg$c9 = "base";
  var peg$c10 = "upi";
  var peg$c11 = "downi";
  var peg$c12 = "l";
  var peg$c13 = "r";
  var peg$c14 = "f";
  var peg$c15 = "(";
  var peg$c16 = "[";
  var peg$c17 = "\\{";
  var peg$c18 = "c";
  var peg$c19 = "b";
  var peg$c20 = "m";
  var peg$c21 = "\\begin{";
  var peg$c22 = "}";
  var peg$c23 = "cs";
  var peg$c24 = "as";
  var peg$c25 = "tail";
  var peg$c26 = "p";
  var peg$c27 = "*";
  var peg$c28 = "||";
  var peg$c29 = "|";
  var peg$c30 = "@";
  var peg$c31 = "num";
  var peg$c32 = "]";
  var peg$c33 = " ";
  var peg$c34 = "s";
  var peg$c35 = "(^)";
  var peg$c36 = "n";
  var peg$c37 = "^";
  var peg$c38 = "o";
  var peg$c39 = "a";
  var peg$c40 = "_";
  var peg$c41 = "{";
  var peg$c42 = "-";
  var peg$c43 = "mathrm";
  var peg$c44 = "mbox";
  var peg$c45 = "\\";
  var peg$c46 = "&";
  var peg$c47 = "\\\\";
  var peg$c48 = "\\begin";
  var peg$c49 = "\\end";
  var peg$c50 = "{matrix}";
  var peg$c51 = "{pmatrix}";
  var peg$c52 = "{bmatrix}";
  var peg$c53 = "{Bmatrix}";
  var peg$c54 = "{vmatrix}";
  var peg$c55 = "{Vmatrix}";
  var peg$c56 = "{array}";
  var peg$c57 = "{align}";
  var peg$c58 = "{aligned}";
  var peg$c59 = "{alignat}";
  var peg$c60 = "{alignedat}";
  var peg$c61 = "{smallmatrix}";
  var peg$c62 = "{cases}";
  var peg$c63 = "named";
  var peg$c64 = "gray";
  var peg$c65 = "rgb";
  var peg$c66 = "RGB";
  var peg$c67 = "cmyk";
  var peg$c68 = "k";
  var peg$c69 = ",";
  var peg$c70 = "g";
  var peg$c71 = "y";
  var peg$c72 = "0";
  var peg$c73 = ".";
  var peg$c74 = "=";
  var peg$c75 = "#";
  var peg$c76 = "~--";
  var peg$c77 = "~-";
  var peg$c78 = "~=";
  var peg$c79 = "~";
  var peg$c80 = "-~-";
  var peg$c81 = "....";
  var peg$c82 = "...";
  var peg$c83 = "<-";
  var peg$c84 = "->";
  var peg$c85 = "1";
  var peg$c86 = "2";
  var peg$c87 = "3";
  var peg$c88 = "{math}";
  var peg$c89 = "\\}";

  var peg$r0 = /^[ \t\n\r]/;
  var peg$r1 = /^[lrc]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[tcb]/;
  var peg$r4 = /^[a-zA-Z]/;
  var peg$r5 = /^[,:;?!']/;
  var peg$r6 = /^[().]/;
  var peg$r7 = /^[\-+*=]/;
  var peg$r8 = /^[\/|]/;
  var peg$r9 = /^[\-0-9a-zA-Z+*,=():\/;?.!'` [\]\x80-\uD7FF\uE000-\uFFFF]/;
  var peg$r10 = /^[\uD800-\uDBFF]/;
  var peg$r11 = /^[\uDC00-\uDFFF]/;
  var peg$r12 = /^[, ;!_#%$&]/;
  var peg$r13 = /^[><~]/;
  var peg$r14 = /^[%$]/;
  var peg$r15 = /^[{}|]/;
  var peg$r16 = /^[1-9]/;
  var peg$r17 = /^[01]/;
  var peg$r18 = /^[+-.*']/;
  var peg$r19 = /^[+-=#().,;\/*<>|@&'[\]]/;

  var peg$e0 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
  var peg$e1 = peg$literalExpectation("(", false);
  var peg$e2 = peg$literalExpectation("[", false);
  var peg$e3 = peg$literalExpectation("\\{", false);
  var peg$e4 = peg$literalExpectation("\\begin{", false);
  var peg$e5 = peg$literalExpectation("}", false);
  var peg$e6 = peg$classExpectation(["l", "r", "c"], false, false);
  var peg$e7 = peg$literalExpectation("p", false);
  var peg$e8 = peg$literalExpectation("*", false);
  var peg$e9 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e10 = peg$literalExpectation("||", false);
  var peg$e11 = peg$literalExpectation("|", false);
  var peg$e12 = peg$literalExpectation("@", false);
  var peg$e13 = peg$classExpectation(["t", "c", "b"], false, false);
  var peg$e14 = peg$literalExpectation("]", false);
  var peg$e15 = peg$literalExpectation(" ", false);
  var peg$e16 = peg$literalExpectation("(^)", false);
  var peg$e17 = peg$literalExpectation("^", false);
  var peg$e18 = peg$literalExpectation("_", false);
  var peg$e19 = peg$literalExpectation("{", false);
  var peg$e20 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e21 = peg$classExpectation([",", ":", ";", "?", "!", "'"], false, false);
  var peg$e22 = peg$classExpectation(["(", ")", "."], false, false);
  var peg$e23 = peg$classExpectation(["-", "+", "*", "="], false, false);
  var peg$e24 = peg$classExpectation(["/", "|"], false, false);
  var peg$e25 = peg$otherExpectation("valid UTF-16 sequences");
  var peg$e26 = peg$classExpectation(["-", ["0", "9"], ["a", "z"], ["A", "Z"], "+", "*", ",", "=", "(", ")", ":", "/", ";", "?", ".", "!", "'", "`", " ", "[", "]", ["\x80", "\uD7FF"], ["\uE000", "\uFFFF"]], false, false);
  var peg$e27 = peg$classExpectation([["\uD800", "\uDBFF"]], false, false);
  var peg$e28 = peg$classExpectation([["\uDC00", "\uDFFF"]], false, false);
  var peg$e29 = peg$literalExpectation("-", false);
  var peg$e30 = peg$literalExpectation("\\", false);
  var peg$e31 = peg$classExpectation([",", " ", ";", "!", "_", "#", "%", "$", "&"], false, false);
  var peg$e32 = peg$classExpectation([">", "<", "~"], false, false);
  var peg$e33 = peg$classExpectation(["%", "$"], false, false);
  var peg$e34 = peg$classExpectation(["{", "}", "|"], false, false);
  var peg$e35 = peg$literalExpectation("&", false);
  var peg$e36 = peg$literalExpectation("\\\\", false);
  var peg$e37 = peg$literalExpectation("\\begin", false);
  var peg$e38 = peg$literalExpectation("\\end", false);
  var peg$e39 = peg$literalExpectation("{matrix}", false);
  var peg$e40 = peg$literalExpectation("{pmatrix}", false);
  var peg$e41 = peg$literalExpectation("{bmatrix}", false);
  var peg$e42 = peg$literalExpectation("{Bmatrix}", false);
  var peg$e43 = peg$literalExpectation("{vmatrix}", false);
  var peg$e44 = peg$literalExpectation("{Vmatrix}", false);
  var peg$e45 = peg$literalExpectation("{array}", false);
  var peg$e46 = peg$literalExpectation("{align}", false);
  var peg$e47 = peg$literalExpectation("{aligned}", false);
  var peg$e48 = peg$literalExpectation("{alignat}", false);
  var peg$e49 = peg$literalExpectation("{alignedat}", false);
  var peg$e50 = peg$literalExpectation("{smallmatrix}", false);
  var peg$e51 = peg$literalExpectation("{cases}", false);
  var peg$e52 = peg$literalExpectation("named", true);
  var peg$e53 = peg$literalExpectation("gray", true);
  var peg$e54 = peg$literalExpectation("rgb", false);
  var peg$e55 = peg$literalExpectation("RGB", false);
  var peg$e56 = peg$literalExpectation("cmyk", true);
  var peg$e57 = peg$literalExpectation(",", false);
  var peg$e58 = peg$literalExpectation("0", false);
  var peg$e59 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e60 = peg$literalExpectation(".", false);
  var peg$e61 = peg$classExpectation(["0", "1"], false, false);
  var peg$e62 = peg$classExpectation([["+", "."], "*", "'"], false, false);
  var peg$e63 = peg$literalExpectation("=", false);
  var peg$e64 = peg$literalExpectation("#", false);
  var peg$e65 = peg$literalExpectation("~--", false);
  var peg$e66 = peg$literalExpectation("~-", false);
  var peg$e67 = peg$literalExpectation("~=", false);
  var peg$e68 = peg$literalExpectation("~", false);
  var peg$e69 = peg$literalExpectation("-~-", false);
  var peg$e70 = peg$literalExpectation("....", false);
  var peg$e71 = peg$literalExpectation("...", false);
  var peg$e72 = peg$literalExpectation("<-", false);
  var peg$e73 = peg$literalExpectation("->", false);
  var peg$e74 = peg$literalExpectation("1", false);
  var peg$e75 = peg$literalExpectation("2", false);
  var peg$e76 = peg$literalExpectation("3", false);
  var peg$e77 = peg$literalExpectation("{math}", false);
  var peg$e78 = peg$literalExpectation("\\}", false);
  var peg$e79 = peg$classExpectation([["+", "="], "#", "(", ")", ".", ",", ";", "/", "*", "<", ">", "|", "@", "&", "'", "[", "]"], false, false);

  var peg$f0 = function(t) { assert.ok(t instanceof TexArray); return lst2arr(t); };
  var peg$f1 = function(e) { return e; };
  var peg$f2 = function(e1, name, e2) { return new TexArray(new Infix(name, lst2arr(e1), lst2arr(e2))); };
  var peg$f3 = function() { return new TexArray(); };
  var peg$f4 = function(h, t) { return new TexArray(h, t); };
  var peg$f5 = function(h, t) { return new TexArray(h, t); };
  var peg$f6 = function(d, e) { return new TexArray(new Declh(d.fname, lst2arr(e))); };
  var peg$f7 = function(l1, l2) {
        return new Fq(l1.base, l1.down, l2); };
  var peg$f8 = function(l1, l2) {
        return new Fq(l1.base, l2, l1.up); };
  var peg$f9 = function(base, upi) { return new Uq(base, upi); };
  var peg$f10 = function(base, downi) { return new Dq(base, downi); };
  var peg$f11 = function() { return new Literal( "]"); };
  var peg$f12 = function(l, e) { return new TexArray(l, e); };
  var peg$f13 = function() { return new TexArray(); };
  var peg$f14 = function(l1, l2) { return new Fq(l1.base, l1.down, l2); };
  var peg$f15 = function(l1, l2) { return new Fq (l1.base, l2, l1.up); };
  var peg$f16 = function(l1, l2) { return new Fq(new TexArray(), l1.down, l2); };
  var peg$f17 = function(base, upi) { return new Uq(base, upi); };
  var peg$f18 = function(base, downi) { return new Dq(base, downi); };
  var peg$f19 = function(l) { return new Uq( new TexArray(),l); };
  var peg$f20 = function(l) { return new Dq(new TexArray(),l); };
  var peg$f21 = function(d) { return d; };
  var peg$f22 = function() { return  "]"; };
  var peg$f23 = function(d) { return d; };
  var peg$f24 = function() { return  "]"; };
  var peg$f25 = function(r) { return new Literal(r); };
  var peg$f26 = function(f) { return tu.latex_function_names[f]; };
  var peg$f27 = function(f) { return " ";};
  var peg$f28 = function(f, c) { return new TexArray( new Literal(f) , new Literal( c ) ) ; };
  var peg$f29 = function(f) { return tu.nullary_macro_aliase[f]; };
  var peg$f30 = function(f) {
     var ast = peg$parse(tu.nullary_macro_aliase[f]);
     assert.ok(ast instanceof TexArray && ast.length === 1);
     return ast.first();
   };
  var peg$f31 = function(f) { return tu.deprecated_nullary_macro_aliase[f]; };
  var peg$f32 = function(f) {
     var ast = peg$parse(tu.deprecated_nullary_macro_aliase[f]);
     assert.ok(ast instanceof TexArray && ast.length === 1);
     if (options.oldtexvc){
       return ast.first();
     } else {
          throw new peg$SyntaxError("Deprecation: Alias no longer supported.", [], text(), location());
     }
   };
  var peg$f33 = function(r) { return new Literal(r); };
  var peg$f34 = function(b, r) { return new Big(b, r); };
  var peg$f35 = function(b) { return new Big(b,  "]"); };
  var peg$f36 = function(l, e, r) {return new Lr(l, r, lst2arr(e)); };
  var peg$f37 = function(name, e, l) { return new Fun2sq(name, new Curly(lst2arr(e)), l); };
  var peg$f38 = function(name, l) { return new Fun1(name, l); };
  var peg$f39 = function(name, l) {return new Fun1nb(name, l); };
  var peg$f40 = function(name, l) { return new Mhchem(name, l); };
  var peg$f41 = function(name, l1, l2) { return new Fun2(name, l1, l2); };
  var peg$f42 = function(name, l1, l2) { return new Fun2nb(name, l1, l2); };
  var peg$f43 = function(e) { return new Curly(lst2arr(e)); };
  var peg$f44 = function(e1, name, e2) { return new Infix(name, lst2arr(e1), lst2arr(e2)); };
  var peg$f45 = function(m) { return new Matrix("matrix", lst2arr(m)); };
  var peg$f46 = function(m) { return new Matrix("pmatrix", lst2arr(m)); };
  var peg$f47 = function(m) { return new Matrix("bmatrix", lst2arr(m)); };
  var peg$f48 = function(m) { return new Matrix("Bmatrix", lst2arr(m)); };
  var peg$f49 = function(m) { return new Matrix("vmatrix", lst2arr(m)); };
  var peg$f50 = function(m) { return new Matrix("Vmatrix", lst2arr(m)); };
  var peg$f51 = function(m) { return new Matrix("array", lst2arr(m)); };
  var peg$f52 = function(m) { return new Matrix("aligned", lst2arr(m)); };
  var peg$f53 = function(m) { return new Matrix("aligned", lst2arr(m)); };
  var peg$f54 = function(m) { return new Matrix("alignedat", lst2arr(m)); };
  var peg$f55 = function(m) { return new Matrix("alignedat", lst2arr(m)); };
  var peg$f56 = function(m) { return new Matrix("smallmatrix", lst2arr(m)); };
  var peg$f57 = function(m) { return new Matrix("cases", lst2arr(m)); };
  var peg$f58 = function() { throw new peg$SyntaxError("Illegal TeX function", [], text(), location()); };
  var peg$f59 = function(f) { return !tu.all_functions[f]; };
  var peg$f60 = function(f) { throw new peg$SyntaxError("Illegal TeX function", [], f, location()); };
  var peg$f61 = function(cs, m) {
        if (m.length ) {
            m.first().first().unshift(cs);
            return m;
        }
        return new TexArray(new TexArray(cs));
    };
  var peg$f62 = function(as, m) { m.first().first().unshift(as); return m; };
  var peg$f63 = function(l, m) { return m; };
  var peg$f64 = function(l, tail) { return new TexArray( lst2arr(l), tail ); };
  var peg$f65 = function(f, l) {
        if (typeof l.first() === 'undefined' ) {
            l.push(new TexArray())
        }
        l.first().unshift(new Literal(f + " ")); return l;};
  var peg$f66 = function(e, l) { return l; };
  var peg$f67 = function(e, tail) { return new TexArray(e, tail); };
  var peg$f68 = function() { return text(); };
  var peg$f69 = function(cs) { return new Curly(new TexArray(new Literal(cs))); };
  var peg$f70 = function() { return text(); };
  var peg$f71 = function(num) { return new Curly(new TexArray(new Literal(num))); };
  var peg$f72 = function(e) { return new Curly(lst2arr(e)); };
  var peg$f73 = function(p, s) { return new TexArray(p,new TexArray(new Literal(" "),s)); };
  var peg$f74 = function(p) { return new TexArray(p,new TexArray()); };
  var peg$f75 = function(m) { return new Literal(m); };
  var peg$f76 = function(m, n) { return new ChemWord(m, new Literal(n)); };
  var peg$f77 = function(m) { return m; };
  var peg$f78 = function(m) { return new Literal(m); };
  var peg$f79 = function(m) { return new Literal(m); };
  var peg$f80 = function(m, n) { return new ChemWord(m, n); };
  var peg$f81 = function(m, n, o) { return new ChemWord(new ChemWord(new Literal(m), n), o); };
  var peg$f82 = function(m) { return m; };
  var peg$f83 = function() { return new Literal(""); };
  var peg$f84 = function(m) { return m;};
  var peg$f85 = function(c) { return new Literal(c) };
  var peg$f86 = function(m) { return m;};
  var peg$f87 = function(c) { return new Curly(new TexArray(c)); };
  var peg$f88 = function(c) { return new Dollar(lst2arr(c)); };
  var peg$f89 = function(name, l) { return new Fun1(name, l); };
  var peg$f90 = function(m) { return m; };
  var peg$f91 = function(c) { return new Literal(c) };
  var peg$f92 = function(e) { return new Curly(new TexArray(new Literal(e))); };
  var peg$f93 = function(a, b) { return new ChemWord(new Literal(a), new Literal(b)); };
  var peg$f94 = function(a, b) { return new ChemWord(new Literal(a), b); };
  var peg$f95 = function(a, b) { return new ChemWord(new Literal(a), new Dollar(lst2arr(b))); };
  var peg$f96 = function(name, l1, l2) { return new ChemFun2u(name, l1, l2); };
  var peg$f97 = function(name, l1, l2) { return new Fun2(name, l1, l2); };
  var peg$f98 = function(name, l1, l2) { return new Fun2(name, l1, l2); };
  var peg$f99 = function(name, l) { return new Fun1(name, l); };
  var peg$f100 = function(cs) { return new Literal(cs.join('')); };
  var peg$f101 = function(name) { return new Literal(name.join('')); };
  var peg$f102 = function(l, h) { return text(); };
  var peg$f103 = function(b) { return tu.box_functions[b]; };
  var peg$f104 = function(b, cs) { return new Box(b, cs.join('')); };
  var peg$f105 = function(c) { return c; };
  var peg$f106 = function(f) { return tu.mediawiki_function_names[f]; };
  var peg$f107 = function(f) { return " ";};
  var peg$f108 = function(f, c) { return "\\operatorname {" + f.slice(1) + "}" + c; };
  var peg$f109 = function(f) { return tu.nullary_macro[f]; };
  var peg$f110 = function(f) { return f + " "; };
  var peg$f111 = function(f) { return options.usemathrm && tu.nullary_macro_in_mbox[f]; };
  var peg$f112 = function(f) { return "\\mathrm {" + f + "} "; };
  var peg$f113 = function(mathrm) { return options.usemathrm && mathrm === "\\mathrm"; };
  var peg$f114 = function(mathrm, f) { return options.usemathrm && tu.nullary_macro_in_mbox[f]; };
  var peg$f115 = function(mathrm, f) { return options.usemathrm && "\\mathrm {" + f + "} "; };
  var peg$f116 = function(f) { return tu.nullary_macro_in_mbox[f]; };
  var peg$f117 = function(f) { return "\\mbox{" + f + "} "; };
  var peg$f118 = function(mbox) { return mbox === "\\mbox"; };
  var peg$f119 = function(mbox, f) { return tu.nullary_macro_in_mbox[f]; };
  var peg$f120 = function(mbox, f) { return "\\mbox{" + f + "} "; };
  var peg$f121 = function(f) { return f; };
  var peg$f122 = function(c) { return "\\" + c; };
  var peg$f123 = function(c) { return c; };
  var peg$f124 = function(c) { if(options.oldtexvc) {
    return "\\" + c; /* escape dangerous chars */
    } else {
     throw new peg$SyntaxError("Deprecation: % and $ need to be escaped.", [], text(), location());
    }};
  var peg$f125 = function(c) { return c; };
  var peg$f126 = function(c) { return "\\" + c; };
  var peg$f127 = function(f) { return tu.other_delimiters1[f]; };
  var peg$f128 = function(f) { return f + " "; };
  var peg$f129 = function(f) { return tu.other_delimiters2[f]; };
  var peg$f130 = function(f) { var p = peg$parse(tu.other_delimiters2[f]);
     assert.ok(p instanceof TexArray && p.length === 1);
     assert.ok(p.first() instanceof Literal);
     return p.first().arg;
   };
  var peg$f131 = function(f) { return tu.fun_ar1nb[f]; };
  var peg$f132 = function(f) { return f; };
  var peg$f133 = function(f) { return tu.fun_ar1opt[f]; };
  var peg$f134 = function(f) { return f; };
  var peg$f135 = function() { return text(); };
  var peg$f136 = function(f) { return tu.big_literals[f]; };
  var peg$f137 = function(f) { return f; };
  var peg$f138 = function(f) { return tu.fun_ar1[f]; };
  var peg$f139 = function(f) { return f; };
  var peg$f140 = function(f) { return options.oldmhchem && tu.fun_mhchem[f]};
  var peg$f141 = function(f) { return f; };
  var peg$f142 = function(f) { return tu.other_fun_ar1[f]; };
  var peg$f143 = function(f) { if (options.oldtexvc) {
        return tu.other_fun_ar1[f];
     } else {
        throw new peg$SyntaxError("Deprecation: \\Bbb and \\bold are not allowed in math mode.", [], text(), location());
       }};
  var peg$f144 = function(f) { return tu.fun_mhchem[f]; };
  var peg$f145 = function(f) { return f; };
  var peg$f146 = function(f) { return tu.fun_ar2[f]; };
  var peg$f147 = function(f) { return f; };
  var peg$f148 = function(f) { return tu.fun_infix[f]; };
  var peg$f149 = function(f) { return f; };
  var peg$f150 = function(f) { return tu.declh_function[f]; };
  var peg$f151 = function(f) { return new Declh(f, new TexArray()); };
  var peg$f152 = function(f) { return tu.fun_ar2nb[f]; };
  var peg$f153 = function(f) { return f; };
  var peg$f154 = function(f) { return tu.left_function[f]; };
  var peg$f155 = function(f) { return tu.right_function[f]; };
  var peg$f156 = function(f) { return tu.hline_function[f]; };
  var peg$f157 = function(f) { return f; };
  var peg$f158 = function(f) { return tu.color_function[f]; };
  var peg$f159 = function(f, cs) { return f + " " + cs; };
  var peg$f160 = function(f) { return tu.definecolor_function[f]; };
  var peg$f161 = function(f, name, cs) { return "{named}" + cs; };
  var peg$f162 = function(f, name, cs) { return "{gray}" + cs; };
  var peg$f163 = function(f, name, cs) { return "{rgb}" + cs; };
  var peg$f164 = function(f, name, cs) { return "{rgb}" + cs; };
  var peg$f165 = function(f, name, cs) { return "{cmyk}" + cs; };
  var peg$f166 = function(f, name, a) { return f + " {" + name.join('') + "}" + a; };
  var peg$f167 = function(cs) { return "[named]" + cs; };
  var peg$f168 = function(cs) { return "[gray]" + cs; };
  var peg$f169 = function(cs) { return "[rgb]" + cs; };
  var peg$f170 = function(cs) { return "[rgb]" + cs; };
  var peg$f171 = function(cs) { return "[cmyk]" + cs; };
  var peg$f172 = function(name) { return "{" + name.join('') + "}"; };
  var peg$f173 = function(k) { return "{"+k+"}"; };
  var peg$f174 = function(r, g, b) { return "{"+r+","+g+","+b+"}"; };
  var peg$f175 = function(r, g, b) { return "{"+r+","+g+","+b+"}"; };
  var peg$f176 = function(c, m, y, k) { return "{"+c+","+m+","+y+","+k+"}"; };
  var peg$f177 = function(n) { return parseInt(n, 10) <= 255; };
  var peg$f178 = function(n) { return n / 255; };
  var peg$f179 = function(n) { return n; };
  var peg$f180 = function(n) { return n; };
  var peg$f181 = function(f) { return tu.mhchem_single_macro[f]; };
  var peg$f182 = function(f) { return f; };
  var peg$f183 = function(c) { return "\\" + c; };
  var peg$f184 = function(f) { return tu.mhchem_bond[f]; };
  var peg$f185 = function(f) { return f; };
  var peg$f186 = function(f) { return tu.mhchem_macro_1p[f]; };
  var peg$f187 = function(f) { return f; };
  var peg$f188 = function(f) { return tu.mhchem_macro_2p[f]; };
  var peg$f189 = function(f) { return f; };
  var peg$f190 = function(f) { return tu.mhchem_macro_2pu[f]; };
  var peg$f191 = function(f) { return f; };
  var peg$f192 = function(f) { return tu.mhchem_macro_2pc[f]; };
  var peg$f193 = function(f) { return f; };
  var peg$f194 = function(c) { return c; };
  var peg$f195 = function(c) { return c; };
  var peg$f196 = function(c) { return c; };
  var peg$f197 = function(c) { return c; };
  var peg$f198 = function(c) { return c; };
  var peg$f199 = function() { return "{}"; };
  var peg$f200 = function() { return false; };
  var peg$f201 = function() { return peg$currPos === input.length; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$resultsCache = {};

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 0;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsetex_expr();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f0(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    var key = peg$currPos * 125 + 1;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e0); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsetex_expr() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 2;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseEOF();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsene_expr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFUN_INFIX();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsene_expr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseEOF();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f2(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexpr() {
    var s0, s1;

    var key = peg$currPos * 125 + 3;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parsene_expr();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f3();
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsene_expr() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 4;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselit_aq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselitsq_aq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseexpr();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f5(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseDECLh();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f6(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselitsq_aq() {
    var s0;

    var key = peg$currPos * 125 + 5;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parselitsq_fq();
    if (s0 === peg$FAILED) {
      s0 = peg$parselitsq_dq();
      if (s0 === peg$FAILED) {
        s0 = peg$parselitsq_uq();
        if (s0 === peg$FAILED) {
          s0 = peg$parselitsq_zq();
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselitsq_fq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 6;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselitsq_dq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f7(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselitsq_uq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUB();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f8(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselitsq_uq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 7;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselitsq_zq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f9(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselitsq_dq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 8;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselitsq_zq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUB();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f10(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselitsq_zq() {
    var s0, s1;

    var key = peg$currPos * 125 + 9;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSQ_CLOSE();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f11();
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseexpr_nosqc() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 10;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselit_aq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpr_nosqc();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f13();
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_aq() {
    var s0;

    var key = peg$currPos * 125 + 11;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parselit_fq();
    if (s0 === peg$FAILED) {
      s0 = peg$parselit_dq();
      if (s0 === peg$FAILED) {
        s0 = peg$parselit_uq();
        if (s0 === peg$FAILED) {
          s0 = peg$parselit_dqn();
          if (s0 === peg$FAILED) {
            s0 = peg$parselit_uqn();
            if (s0 === peg$FAILED) {
              s0 = peg$parselit();
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_fq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 12;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselit_dq();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parselit_uq();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSUB();
        if (s2 !== peg$FAILED) {
          s3 = peg$parselit();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f15(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parselit_dqn();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseSUP();
          if (s2 !== peg$FAILED) {
            s3 = peg$parselit();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_uq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 13;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUP();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_dq() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 14;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parselit();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSUB();
      if (s2 !== peg$FAILED) {
        s3 = peg$parselit();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f18(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_uqn() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 15;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSUP();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f19(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit_dqn() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 16;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseSUB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselit();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f20(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseleft() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 17;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLEFT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDELIMITER();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseLEFT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSQ_CLOSE();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseright() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 18;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseRIGHT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDELIMITER();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseRIGHT();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSQ_CLOSE();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24();
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parselit() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 125 + 19;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseLITERAL();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f25(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f26(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c17) {
                s4 = peg$c17;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = '';
                peg$savedPos = s4;
                s5 = peg$f27(s1);
                s4 = s5;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f28(s1, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f29(s1);
          if (s2) {
            s2 = undefined;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f30(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsegeneric_func();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f31(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f32(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseDELIMITER();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f33(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseBIG();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseDELIMITER();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f34(s1, s2);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseBIG();
                if (s1 !== peg$FAILED) {
                  s2 = peg$parseSQ_CLOSE();
                  if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f35(s1);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseleft();
                  if (s1 !== peg$FAILED) {
                    s2 = peg$parseexpr();
                    if (s2 !== peg$FAILED) {
                      s3 = peg$parseright();
                      if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s0 = peg$f36(s1, s2, s3);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseFUN_AR1opt();
                    if (s1 !== peg$FAILED) {
                      s2 = peg$parseexpr_nosqc();
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parseSQ_CLOSE();
                        if (s3 !== peg$FAILED) {
                          s4 = peg$parselit();
                          if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f37(s1, s2, s4);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      s1 = peg$parseFUN_AR1();
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parselit();
                        if (s2 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s0 = peg$f38(s1, s2);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseFUN_AR1nb();
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parselit();
                          if (s2 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s0 = peg$f39(s1, s2);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                        if (s0 === peg$FAILED) {
                          s0 = peg$currPos;
                          s1 = peg$parseFUN_MHCHEM();
                          if (s1 !== peg$FAILED) {
                            s2 = peg$parsechem_lit();
                            if (s2 !== peg$FAILED) {
                              peg$savedPos = s0;
                              s0 = peg$f40(s1, s2);
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                          if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseFUN_AR2();
                            if (s1 !== peg$FAILED) {
                              s2 = peg$parselit();
                              if (s2 !== peg$FAILED) {
                                s3 = peg$parselit();
                                if (s3 !== peg$FAILED) {
                                  peg$savedPos = s0;
                                  s0 = peg$f41(s1, s2, s3);
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                            if (s0 === peg$FAILED) {
                              s0 = peg$currPos;
                              s1 = peg$parseFUN_AR2nb();
                              if (s1 !== peg$FAILED) {
                                s2 = peg$parselit();
                                if (s2 !== peg$FAILED) {
                                  s3 = peg$parselit();
                                  if (s3 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s0 = peg$f42(s1, s2, s3);
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                } else {
                                  peg$currPos = s0;
                                  s0 = peg$FAILED;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                              if (s0 === peg$FAILED) {
                                s0 = peg$parseBOX();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$currPos;
                                  s1 = peg$parseCURLY_OPEN();
                                  if (s1 !== peg$FAILED) {
                                    s2 = peg$parseexpr();
                                    if (s2 !== peg$FAILED) {
                                      s3 = peg$parseCURLY_CLOSE();
                                      if (s3 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s0 = peg$f43(s2);
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                  } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                  }
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$currPos;
                                    s1 = peg$parseCURLY_OPEN();
                                    if (s1 !== peg$FAILED) {
                                      s2 = peg$parsene_expr();
                                      if (s2 !== peg$FAILED) {
                                        s3 = peg$parseFUN_INFIX();
                                        if (s3 !== peg$FAILED) {
                                          s4 = peg$parsene_expr();
                                          if (s4 !== peg$FAILED) {
                                            s5 = peg$parseCURLY_CLOSE();
                                            if (s5 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f44(s2, s3, s4);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                    } else {
                                      peg$currPos = s0;
                                      s0 = peg$FAILED;
                                    }
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$currPos;
                                      s1 = peg$parseBEGIN_MATRIX();
                                      if (s1 !== peg$FAILED) {
                                        s2 = peg$parsearray();
                                        if (s2 === peg$FAILED) {
                                          s2 = peg$parsematrix();
                                        }
                                        if (s2 !== peg$FAILED) {
                                          s3 = peg$parseEND_MATRIX();
                                          if (s3 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s0 = peg$f45(s2);
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                      } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                      }
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$currPos;
                                        s1 = peg$parseBEGIN_PMATRIX();
                                        if (s1 !== peg$FAILED) {
                                          s2 = peg$parsearray();
                                          if (s2 === peg$FAILED) {
                                            s2 = peg$parsematrix();
                                          }
                                          if (s2 !== peg$FAILED) {
                                            s3 = peg$parseEND_PMATRIX();
                                            if (s3 !== peg$FAILED) {
                                              peg$savedPos = s0;
                                              s0 = peg$f46(s2);
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                        } else {
                                          peg$currPos = s0;
                                          s0 = peg$FAILED;
                                        }
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$currPos;
                                          s1 = peg$parseBEGIN_BMATRIX();
                                          if (s1 !== peg$FAILED) {
                                            s2 = peg$parsearray();
                                            if (s2 === peg$FAILED) {
                                              s2 = peg$parsematrix();
                                            }
                                            if (s2 !== peg$FAILED) {
                                              s3 = peg$parseEND_BMATRIX();
                                              if (s3 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s0 = peg$f47(s2);
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                          } else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                          }
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$currPos;
                                            s1 = peg$parseBEGIN_BBMATRIX();
                                            if (s1 !== peg$FAILED) {
                                              s2 = peg$parsearray();
                                              if (s2 === peg$FAILED) {
                                                s2 = peg$parsematrix();
                                              }
                                              if (s2 !== peg$FAILED) {
                                                s3 = peg$parseEND_BBMATRIX();
                                                if (s3 !== peg$FAILED) {
                                                  peg$savedPos = s0;
                                                  s0 = peg$f48(s2);
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                            } else {
                                              peg$currPos = s0;
                                              s0 = peg$FAILED;
                                            }
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$currPos;
                                              s1 = peg$parseBEGIN_VMATRIX();
                                              if (s1 !== peg$FAILED) {
                                                s2 = peg$parsearray();
                                                if (s2 === peg$FAILED) {
                                                  s2 = peg$parsematrix();
                                                }
                                                if (s2 !== peg$FAILED) {
                                                  s3 = peg$parseEND_VMATRIX();
                                                  if (s3 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s0 = peg$f49(s2);
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                              } else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                              }
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$currPos;
                                                s1 = peg$parseBEGIN_VVMATRIX();
                                                if (s1 !== peg$FAILED) {
                                                  s2 = peg$parsearray();
                                                  if (s2 === peg$FAILED) {
                                                    s2 = peg$parsematrix();
                                                  }
                                                  if (s2 !== peg$FAILED) {
                                                    s3 = peg$parseEND_VVMATRIX();
                                                    if (s3 !== peg$FAILED) {
                                                      peg$savedPos = s0;
                                                      s0 = peg$f50(s2);
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                } else {
                                                  peg$currPos = s0;
                                                  s0 = peg$FAILED;
                                                }
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$currPos;
                                                  s1 = peg$parseBEGIN_ARRAY();
                                                  if (s1 !== peg$FAILED) {
                                                    s2 = peg$parseopt_pos();
                                                    if (s2 !== peg$FAILED) {
                                                      s3 = peg$parsearray();
                                                      if (s3 !== peg$FAILED) {
                                                        s4 = peg$parseEND_ARRAY();
                                                        if (s4 !== peg$FAILED) {
                                                          peg$savedPos = s0;
                                                          s0 = peg$f51(s3);
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                  } else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                  }
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$currPos;
                                                    s1 = peg$parseBEGIN_ALIGN();
                                                    if (s1 !== peg$FAILED) {
                                                      s2 = peg$parseopt_pos();
                                                      if (s2 !== peg$FAILED) {
                                                        s3 = peg$parsematrix();
                                                        if (s3 !== peg$FAILED) {
                                                          s4 = peg$parseEND_ALIGN();
                                                          if (s4 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s0 = peg$f52(s3);
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                    } else {
                                                      peg$currPos = s0;
                                                      s0 = peg$FAILED;
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$currPos;
                                                      s1 = peg$parseBEGIN_ALIGNED();
                                                      if (s1 !== peg$FAILED) {
                                                        s2 = peg$parseopt_pos();
                                                        if (s2 !== peg$FAILED) {
                                                          s3 = peg$parsematrix();
                                                          if (s3 !== peg$FAILED) {
                                                            s4 = peg$parseEND_ALIGNED();
                                                            if (s4 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s0 = peg$f53(s3);
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                      } else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                      }
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$parseBEGIN_ALIGNAT();
                                                        if (s1 !== peg$FAILED) {
                                                          s2 = peg$parsealignat();
                                                          if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseEND_ALIGNAT();
                                                            if (s3 !== peg$FAILED) {
                                                              peg$savedPos = s0;
                                                              s0 = peg$f54(s2);
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                        } else {
                                                          peg$currPos = s0;
                                                          s0 = peg$FAILED;
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$currPos;
                                                          s1 = peg$parseBEGIN_ALIGNEDAT();
                                                          if (s1 !== peg$FAILED) {
                                                            s2 = peg$parsealignat();
                                                            if (s2 !== peg$FAILED) {
                                                              s3 = peg$parseEND_ALIGNEDAT();
                                                              if (s3 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s0 = peg$f55(s2);
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                          } else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                          }
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$currPos;
                                                            s1 = peg$parseBEGIN_SMALLMATRIX();
                                                            if (s1 !== peg$FAILED) {
                                                              s2 = peg$parsearray();
                                                              if (s2 === peg$FAILED) {
                                                                s2 = peg$parsematrix();
                                                              }
                                                              if (s2 !== peg$FAILED) {
                                                                s3 = peg$parseEND_SMALLMATRIX();
                                                                if (s3 !== peg$FAILED) {
                                                                  peg$savedPos = s0;
                                                                  s0 = peg$f56(s2);
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                            } else {
                                                              peg$currPos = s0;
                                                              s0 = peg$FAILED;
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                              s0 = peg$currPos;
                                                              s1 = peg$parseBEGIN_CASES();
                                                              if (s1 !== peg$FAILED) {
                                                                s2 = peg$parsematrix();
                                                                if (s2 !== peg$FAILED) {
                                                                  s3 = peg$parseEND_CASES();
                                                                  if (s3 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s0 = peg$f57(s2);
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                              } else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                              }
                                                              if (s0 === peg$FAILED) {
                                                                s0 = peg$currPos;
                                                                if (input.substr(peg$currPos, 7) === peg$c21) {
                                                                  s1 = peg$c21;
                                                                  peg$currPos += 7;
                                                                } else {
                                                                  s1 = peg$FAILED;
                                                                  if (peg$silentFails === 0) { peg$fail(peg$e4); }
                                                                }
                                                                if (s1 !== peg$FAILED) {
                                                                  s2 = [];
                                                                  s3 = peg$parsealpha();
                                                                  if (s3 !== peg$FAILED) {
                                                                    while (s3 !== peg$FAILED) {
                                                                      s2.push(s3);
                                                                      s3 = peg$parsealpha();
                                                                    }
                                                                  } else {
                                                                    s2 = peg$FAILED;
                                                                  }
                                                                  if (s2 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                                      s3 = peg$c22;
                                                                      peg$currPos++;
                                                                    } else {
                                                                      s3 = peg$FAILED;
                                                                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                                                                    }
                                                                    if (s3 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s0 = peg$f58();
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                } else {
                                                                  peg$currPos = s0;
                                                                  s0 = peg$FAILED;
                                                                }
                                                                if (s0 === peg$FAILED) {
                                                                  s0 = peg$currPos;
                                                                  s1 = peg$parsegeneric_func();
                                                                  if (s1 !== peg$FAILED) {
                                                                    peg$savedPos = peg$currPos;
                                                                    s2 = peg$f59(s1);
                                                                    if (s2) {
                                                                      s2 = undefined;
                                                                    } else {
                                                                      s2 = peg$FAILED;
                                                                    }
                                                                    if (s2 !== peg$FAILED) {
                                                                      peg$savedPos = s0;
                                                                      s0 = peg$f60(s1);
                                                                    } else {
                                                                      peg$currPos = s0;
                                                                      s0 = peg$FAILED;
                                                                    }
                                                                  } else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsearray() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 20;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsecolumn_spec();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsematrix();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f61(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsealignat() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 21;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsealignat_spec();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsematrix();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f62(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsematrix() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 22;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseline_start();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseNEXT_ROW();
      if (s3 !== peg$FAILED) {
        s4 = peg$parsematrix();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f63(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f64(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseline_start() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 23;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseHLINE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseline_start();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f65(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseline();
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseline() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 24;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseexpr();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = peg$parseNEXT_CELL();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseline();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s2;
          s2 = peg$f66(s1, s4);
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f67(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsecolumn_spec() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 25;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCURLY_OPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      s4 = peg$parseone_col();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseone_col();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f68();
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCURLY_CLOSE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f69(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseone_col() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 125 + 26;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 112) {
        s1 = peg$c26;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCURLY_OPEN();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseboxchars();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseboxchars();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseCURLY_CLOSE();
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 42) {
          s1 = peg$c27;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e8); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseCURLY_OPEN();
          if (s2 !== peg$FAILED) {
            s3 = [];
            if (peg$r2.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s4 !== peg$FAILED) {
              while (s4 !== peg$FAILED) {
                s3.push(s4);
                if (peg$r2.test(input.charAt(peg$currPos))) {
                  s4 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e9); }
                }
              }
            } else {
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              s5 = peg$parseCURLY_CLOSE();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseone_col();
                if (s6 === peg$FAILED) {
                  s6 = peg$currPos;
                  s7 = peg$parseCURLY_OPEN();
                  if (s7 !== peg$FAILED) {
                    s8 = [];
                    s9 = peg$parseone_col();
                    if (s9 !== peg$FAILED) {
                      while (s9 !== peg$FAILED) {
                        s8.push(s9);
                        s9 = peg$parseone_col();
                      }
                    } else {
                      s8 = peg$FAILED;
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parseCURLY_CLOSE();
                      if (s9 !== peg$FAILED) {
                        s7 = [s7, s8, s9];
                        s6 = s7;
                      } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s6;
                      s6 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  s1 = [s1, s2, s3, s4, s5, s6];
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.substr(peg$currPos, 2) === peg$c28) {
            s1 = peg$c28;
            peg$currPos += 2;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e10); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
              s1 = peg$c29;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              s1 = [s1, s2];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 64) {
                s1 = peg$c30;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e12); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                s3 = peg$parseCURLY_OPEN();
                if (s3 !== peg$FAILED) {
                  s4 = [];
                  s5 = peg$parseboxchars();
                  if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                      s4.push(s5);
                      s5 = peg$parseboxchars();
                    }
                  } else {
                    s4 = peg$FAILED;
                  }
                  if (s4 !== peg$FAILED) {
                    s5 = peg$parseCURLY_CLOSE();
                    if (s5 !== peg$FAILED) {
                      s1 = [s1, s2, s3, s4, s5];
                      s0 = s1;
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsealignat_spec() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 27;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCURLY_OPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      s3 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s4 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s2;
        s3 = peg$f70();
      }
      s2 = s3;
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseCURLY_CLOSE();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f71(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseopt_pos() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 125 + 28;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e13); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s5 = peg$c32;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          s1 = [s1, s2, s3, s4, s5, s6];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = '';
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_lit() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 29;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCURLY_OPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechem_sentence();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCURLY_CLOSE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f72(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_sentence() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 30;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parsechem_phrase();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c33;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parsechem_sentence();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f73(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parse_();
      s2 = peg$parsechem_phrase();
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f74(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_phrase() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 31;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c35) {
      s1 = peg$c35;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsechem_word();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCHEM_SINGLE_MACRO();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f76(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsechem_word();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f77(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHEM_SINGLE_MACRO();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f78(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 94) {
              s1 = peg$c37;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e17); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f79(s1);
            }
            s0 = s1;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_word() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 32;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsechem_char();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechem_word_nt();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f80(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHEM_SINGLE_MACRO();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechem_char_nl();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsechem_word_nt();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f81(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_word_nt() {
    var s0, s1;

    var key = peg$currPos * 125 + 33;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsechem_word();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f82(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = '';
      peg$savedPos = s0;
      s1 = peg$f83();
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_char() {
    var s0, s1;

    var key = peg$currPos * 125 + 34;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsechem_char_nl();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f84(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHEM_LETTER();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f85(s1);
      }
      s0 = s1;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_char_nl() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 35;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsechem_script();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f86(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCURLY_OPEN();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechem_text();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseCURLY_CLOSE();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f87(s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseBEGIN_MATH();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseexpr();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseEND_MATH();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f88(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHEM_BOND();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsechem_bond();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f89(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsechem_macro();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f90(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCHEM_NONLETTER();
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f91(s1);
              }
              s0 = s1;
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_bond() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 36;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCURLY_OPEN();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCHEM_BOND_TYPE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCURLY_CLOSE();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f92(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_script() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 37;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCHEM_SUPERSUB();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCHEM_SCRIPT_FOLLOW();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f93(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHEM_SUPERSUB();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsechem_lit();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f94(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHEM_SUPERSUB();
        if (s1 !== peg$FAILED) {
          s2 = peg$parseBEGIN_MATH();
          if (s2 !== peg$FAILED) {
            s3 = peg$parseexpr();
            if (s3 !== peg$FAILED) {
              s4 = peg$parseEND_MATH();
              if (s4 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f95(s1, s3);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_macro() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 38;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseCHEM_MACRO_2PU();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsechem_lit();
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 95) {
          s3 = peg$c40;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsechem_lit();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f96(s1, s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseCHEM_MACRO_2PC();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseCHEM_COLOR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsechem_lit();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f97(s1, s2, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseCHEM_MACRO_2P();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsechem_lit();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsechem_lit();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f98(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseCHEM_MACRO_1P();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsechem_lit();
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f99(s1, s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsechem_text() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 39;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseboxchars();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseboxchars();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f100(s1);
    }
    s0 = s1;

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_COLOR() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 125 + 40;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsealpha();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsealpha();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f101(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsealpha() {
    var s0;

    var key = peg$currPos * 125 + 41;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseliteral_id() {
    var s0;

    var key = peg$currPos * 125 + 42;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseliteral_mn() {
    var s0;

    var key = peg$currPos * 125 + 43;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseliteral_uf_lt() {
    var s0;

    var key = peg$currPos * 125 + 44;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedelimiter_uf_lt() {
    var s0;

    var key = peg$currPos * 125 + 45;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e22); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseliteral_uf_op() {
    var s0;

    var key = peg$currPos * 125 + 46;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r7.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e23); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsedelimiter_uf_op() {
    var s0;

    var key = peg$currPos * 125 + 47;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r8.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e24); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseboxchars() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 48;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$silentFails++;
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$r10.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e27); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f102(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }
    peg$silentFails--;
    if (s0 === peg$FAILED) {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBOX() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 125 + 49;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f103(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s4 = peg$c41;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseboxchars();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseboxchars();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 125) {
              s6 = peg$c22;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f104(s1, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLITERAL() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    var key = peg$currPos * 125 + 50;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseliteral_id();
    if (s1 === peg$FAILED) {
      s1 = peg$parseliteral_mn();
      if (s1 === peg$FAILED) {
        s1 = peg$parseliteral_uf_lt();
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s1 = peg$c42;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
          if (s1 === peg$FAILED) {
            s1 = peg$parseliteral_uf_op();
          }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f105(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f106(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 40) {
            s4 = peg$c15;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e1); }
          }
          if (s4 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 91) {
              s4 = peg$c16;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c17) {
                s4 = peg$c17;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e3); }
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                s5 = '';
                peg$savedPos = s4;
                s5 = peg$f107(s1);
                s4 = s5;
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f108(s1, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f109(s1);
          if (s2) {
            s2 = undefined;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f110(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsegeneric_func();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f111(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f112(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsegeneric_func();
            if (s1 !== peg$FAILED) {
              peg$savedPos = peg$currPos;
              s2 = peg$f113(s1);
              if (s2) {
                s2 = undefined;
              } else {
                s2 = peg$FAILED;
              }
              if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 123) {
                  s4 = peg$c41;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e19); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsegeneric_func();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = peg$currPos;
                    s6 = peg$f114(s1, s5);
                    if (s6) {
                      s6 = undefined;
                    } else {
                      s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                      s7 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s8 = peg$c22;
                        peg$currPos++;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e5); }
                      }
                      if (s8 !== peg$FAILED) {
                        s9 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f115(s1, s5);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parsegeneric_func();
              if (s1 !== peg$FAILED) {
                peg$savedPos = peg$currPos;
                s2 = peg$f116(s1);
                if (s2) {
                  s2 = undefined;
                } else {
                  s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                  s3 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f117(s1);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsegeneric_func();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = peg$currPos;
                  s2 = peg$f118(s1);
                  if (s2) {
                    s2 = undefined;
                  } else {
                    s2 = peg$FAILED;
                  }
                  if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 123) {
                      s4 = peg$c41;
                      peg$currPos++;
                    } else {
                      s4 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e19); }
                    }
                    if (s4 !== peg$FAILED) {
                      s5 = peg$parsegeneric_func();
                      if (s5 !== peg$FAILED) {
                        peg$savedPos = peg$currPos;
                        s6 = peg$f119(s1, s5);
                        if (s6) {
                          s6 = undefined;
                        } else {
                          s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                          s7 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s8 = peg$c22;
                            peg$currPos++;
                          } else {
                            s8 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e5); }
                          }
                          if (s8 !== peg$FAILED) {
                            s9 = peg$parse_();
                            peg$savedPos = s0;
                            s0 = peg$f120(s1, s5);
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  s1 = peg$parseCOLOR();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseDEFINECOLOR();
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f121(s1);
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 92) {
                      s1 = peg$c45;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e30); }
                    }
                    if (s1 !== peg$FAILED) {
                      if (peg$r12.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e31); }
                      }
                      if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f122(s2);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (peg$r13.test(input.charAt(peg$currPos))) {
                        s1 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e32); }
                      }
                      if (s1 !== peg$FAILED) {
                        s2 = peg$parse_();
                        peg$savedPos = s0;
                        s0 = peg$f123(s1);
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (peg$r14.test(input.charAt(peg$currPos))) {
                          s1 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e33); }
                        }
                        if (s1 !== peg$FAILED) {
                          s2 = peg$parse_();
                          peg$savedPos = s0;
                          s0 = peg$f124(s1);
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDELIMITER() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 51;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsedelimiter_uf_lt();
    if (s1 === peg$FAILED) {
      s1 = peg$parsedelimiter_uf_op();
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c16;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f125(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r15.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e34); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f126(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f127(s1);
          if (s2) {
            s2 = undefined;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f128(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsegeneric_func();
          if (s1 !== peg$FAILED) {
            peg$savedPos = peg$currPos;
            s2 = peg$f129(s1);
            if (s2) {
              s2 = undefined;
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              s3 = peg$parse_();
              peg$savedPos = s0;
              s0 = peg$f130(s1);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_AR1nb() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 52;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f131(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f132(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_AR1opt() {
    var s0, s1, s2, s3, s4, s5;

    var key = peg$currPos * 125 + 53;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f133(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 91) {
          s4 = peg$c16;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f134(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNEXT_CELL() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 54;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 38) {
      s1 = peg$c46;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e35); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseNEXT_ROW() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 55;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c47) {
      s1 = peg$c47;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 56;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c48) {
      s1 = peg$c48;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 57;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c49) {
      s1 = peg$c49;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_MATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 58;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c50) {
        s2 = peg$c50;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_MATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 59;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c50) {
        s2 = peg$c50;
        peg$currPos += 8;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e39); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_PMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 60;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c51) {
        s2 = peg$c51;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_PMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 61;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c51) {
        s2 = peg$c51;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e40); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_BMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 62;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_BMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 63;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c52) {
        s2 = peg$c52;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e41); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_BBMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 64;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c53) {
        s2 = peg$c53;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_BBMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 65;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c53) {
        s2 = peg$c53;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_VMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 66;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c54) {
        s2 = peg$c54;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_VMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 67;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c54) {
        s2 = peg$c54;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e43); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_VVMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 68;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c55) {
        s2 = peg$c55;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_VVMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 69;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c55) {
        s2 = peg$c55;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_ARRAY() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 70;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c56) {
        s2 = peg$c56;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_ARRAY() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 71;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c56) {
        s2 = peg$c56;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_ALIGN() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 72;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c57) {
        s2 = peg$c57;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_ALIGN() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 73;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c57) {
        s2 = peg$c57;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_ALIGNED() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 74;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c58) {
        s2 = peg$c58;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_ALIGNED() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 75;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c58) {
        s2 = peg$c58;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e47); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_ALIGNAT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 76;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_ALIGNAT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 77;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 9) === peg$c59) {
        s2 = peg$c59;
        peg$currPos += 9;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_ALIGNEDAT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 78;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c60) {
        s2 = peg$c60;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_ALIGNEDAT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 79;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 11) === peg$c60) {
        s2 = peg$c60;
        peg$currPos += 11;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e49); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_SMALLMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 80;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 13) === peg$c61) {
        s2 = peg$c61;
        peg$currPos += 13;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_SMALLMATRIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 81;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 13) === peg$c61) {
        s2 = peg$c61;
        peg$currPos += 13;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_CASES() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 82;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c62) {
        s2 = peg$c62;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_CASES() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 83;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c62) {
        s2 = peg$c62;
        peg$currPos += 7;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e51); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSQ_CLOSE() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 84;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 93) {
      s1 = peg$c32;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCURLY_OPEN() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 85;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCURLY_CLOSE() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 86;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 125) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSUP() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 87;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 94) {
      s1 = peg$c37;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseSUB() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 88;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 95) {
      s1 = peg$c40;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parsegeneric_func() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 89;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 92) {
      s1 = peg$c45;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e30); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parsealpha();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parsealpha();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f135();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBIG() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 90;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f136(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f137(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_AR1() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 91;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f138(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f139(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsegeneric_func();
      if (s1 !== peg$FAILED) {
        peg$savedPos = peg$currPos;
        s2 = peg$f140(s1);
        if (s2) {
          s2 = undefined;
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f141(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsegeneric_func();
        if (s1 !== peg$FAILED) {
          peg$savedPos = peg$currPos;
          s2 = peg$f142(s1);
          if (s2) {
            s2 = undefined;
          } else {
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            s3 = peg$parse_();
            peg$savedPos = s0;
            s0 = peg$f143(s1);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_MHCHEM() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 92;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f144(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f145(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_AR2() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 93;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f146(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f147(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_INFIX() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 94;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f148(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f149(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDECLh() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 95;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f150(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f151(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseFUN_AR2nb() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 96;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f152(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f153(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseLEFT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 97;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f154(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseRIGHT() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 98;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f155(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseHLINE() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 99;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f156(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f157(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 100;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f158(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s4 = peg$parseCOLOR_SPEC();
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f159(s1, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseDEFINECOLOR() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;

    var key = peg$currPos * 125 + 101;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f160(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 123) {
          s4 = peg$c41;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = [];
          s7 = peg$parsealpha();
          if (s7 !== peg$FAILED) {
            while (s7 !== peg$FAILED) {
              s6.push(s7);
              s7 = peg$parsealpha();
            }
          } else {
            s6 = peg$FAILED;
          }
          if (s6 !== peg$FAILED) {
            s7 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 125) {
              s8 = peg$c22;
              peg$currPos++;
            } else {
              s8 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e5); }
            }
            if (s8 !== peg$FAILED) {
              s9 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 123) {
                s10 = peg$c41;
                peg$currPos++;
              } else {
                s10 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e19); }
              }
              if (s10 !== peg$FAILED) {
                s11 = peg$parse_();
                s12 = peg$currPos;
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c63) {
                  s13 = input.substr(peg$currPos, 5);
                  peg$currPos += 5;
                } else {
                  s13 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e52); }
                }
                if (s13 !== peg$FAILED) {
                  s14 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 125) {
                    s15 = peg$c22;
                    peg$currPos++;
                  } else {
                    s15 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e5); }
                  }
                  if (s15 !== peg$FAILED) {
                    s16 = peg$parse_();
                    s17 = peg$parseCOLOR_SPEC_NAMED();
                    if (s17 !== peg$FAILED) {
                      peg$savedPos = s12;
                      s12 = peg$f161(s1, s6, s17);
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s12;
                  s12 = peg$FAILED;
                }
                if (s12 === peg$FAILED) {
                  s12 = peg$currPos;
                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c64) {
                    s13 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                  } else {
                    s13 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e53); }
                  }
                  if (s13 !== peg$FAILED) {
                    s14 = peg$parse_();
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s15 = peg$c22;
                      peg$currPos++;
                    } else {
                      s15 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s15 !== peg$FAILED) {
                      s16 = peg$parse_();
                      s17 = peg$parseCOLOR_SPEC_GRAY();
                      if (s17 !== peg$FAILED) {
                        peg$savedPos = s12;
                        s12 = peg$f162(s1, s6, s17);
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s12;
                    s12 = peg$FAILED;
                  }
                  if (s12 === peg$FAILED) {
                    s12 = peg$currPos;
                    if (input.substr(peg$currPos, 3) === peg$c65) {
                      s13 = peg$c65;
                      peg$currPos += 3;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e54); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      if (input.charCodeAt(peg$currPos) === 125) {
                        s15 = peg$c22;
                        peg$currPos++;
                      } else {
                        s15 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e5); }
                      }
                      if (s15 !== peg$FAILED) {
                        s16 = peg$parse_();
                        s17 = peg$parseCOLOR_SPEC_rgb();
                        if (s17 !== peg$FAILED) {
                          peg$savedPos = s12;
                          s12 = peg$f163(s1, s6, s17);
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s12;
                      s12 = peg$FAILED;
                    }
                    if (s12 === peg$FAILED) {
                      s12 = peg$currPos;
                      if (input.substr(peg$currPos, 3) === peg$c66) {
                        s13 = peg$c66;
                        peg$currPos += 3;
                      } else {
                        s13 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e55); }
                      }
                      if (s13 !== peg$FAILED) {
                        s14 = peg$parse_();
                        if (input.charCodeAt(peg$currPos) === 125) {
                          s15 = peg$c22;
                          peg$currPos++;
                        } else {
                          s15 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e5); }
                        }
                        if (s15 !== peg$FAILED) {
                          s16 = peg$parse_();
                          s17 = peg$parseCOLOR_SPEC_RGB();
                          if (s17 !== peg$FAILED) {
                            peg$savedPos = s12;
                            s12 = peg$f164(s1, s6, s17);
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s12;
                        s12 = peg$FAILED;
                      }
                      if (s12 === peg$FAILED) {
                        s12 = peg$currPos;
                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
                          s13 = input.substr(peg$currPos, 4);
                          peg$currPos += 4;
                        } else {
                          s13 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e56); }
                        }
                        if (s13 !== peg$FAILED) {
                          s14 = peg$parse_();
                          if (input.charCodeAt(peg$currPos) === 125) {
                            s15 = peg$c22;
                            peg$currPos++;
                          } else {
                            s15 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e5); }
                          }
                          if (s15 !== peg$FAILED) {
                            s16 = peg$parse_();
                            s17 = peg$parseCOLOR_SPEC_CMYK();
                            if (s17 !== peg$FAILED) {
                              peg$savedPos = s12;
                              s12 = peg$f165(s1, s6, s17);
                            } else {
                              peg$currPos = s12;
                              s12 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s12;
                            s12 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s12;
                          s12 = peg$FAILED;
                        }
                      }
                    }
                  }
                }
                if (s12 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f166(s1, s6, s12);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    var key = peg$currPos * 125 + 102;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseCOLOR_SPEC_NAMED();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 91) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c63) {
          s3 = input.substr(peg$currPos, 5);
          peg$currPos += 5;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e52); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c32;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e14); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parse_();
            s7 = peg$parseCOLOR_SPEC_NAMED();
            if (s7 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f167(s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
          s1 = peg$c16;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parse_();
          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c64) {
            s3 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e53); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c32;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e14); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parse_();
              s7 = peg$parseCOLOR_SPEC_GRAY();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f168(s7);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c16;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e2); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (input.substr(peg$currPos, 3) === peg$c65) {
              s3 = peg$c65;
              peg$currPos += 3;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e54); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$parse_();
              if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c32;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e14); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                s7 = peg$parseCOLOR_SPEC_rgb();
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f169(s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
              s1 = peg$c16;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e2); }
            }
            if (s1 !== peg$FAILED) {
              s2 = peg$parse_();
              if (input.substr(peg$currPos, 3) === peg$c66) {
                s3 = peg$c66;
                peg$currPos += 3;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e55); }
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (input.charCodeAt(peg$currPos) === 93) {
                  s5 = peg$c32;
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e14); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parse_();
                  s7 = peg$parseCOLOR_SPEC_RGB();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f170(s7);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c16;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e2); }
              }
              if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c67) {
                  s3 = input.substr(peg$currPos, 4);
                  peg$currPos += 4;
                } else {
                  s3 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e56); }
                }
                if (s3 !== peg$FAILED) {
                  s4 = peg$parse_();
                  if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c32;
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e14); }
                  }
                  if (s5 !== peg$FAILED) {
                    s6 = peg$parse_();
                    s7 = peg$parseCOLOR_SPEC_CMYK();
                    if (s7 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f171(s7);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC_NAMED() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 125 + 103;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parsealpha();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parsealpha();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c22;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parse_();
          peg$savedPos = s0;
          s0 = peg$f172(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC_GRAY() {
    var s0, s1, s2, s3, s4;

    var key = peg$currPos * 125 + 104;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = [];
      s4 = peg$parseCNUM();
      if (s4 !== peg$FAILED) {
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseCNUM();
        }
      } else {
        s3 = peg$FAILED;
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 125) {
          s4 = peg$c22;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f173(s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC_rgb() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var key = peg$currPos * 125 + 105;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCNUM();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c69;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseCNUM();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c69;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseCNUM();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s10 = peg$c22;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f174(s3, s6, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC_RGB() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    var key = peg$currPos * 125 + 106;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCNUM255();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c69;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseCNUM255();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c69;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseCNUM255();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 125) {
                  s10 = peg$c22;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e5); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  peg$savedPos = s0;
                  s0 = peg$f175(s3, s6, s9);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCOLOR_SPEC_CMYK() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    var key = peg$currPos * 125 + 107;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c41;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      s3 = peg$parseCNUM();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s4 = peg$c69;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e57); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parse_();
          s6 = peg$parseCNUM();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s7 = peg$c69;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s9 = peg$parseCNUM();
              if (s9 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 44) {
                  s10 = peg$c69;
                  peg$currPos++;
                } else {
                  s10 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e57); }
                }
                if (s10 !== peg$FAILED) {
                  s11 = peg$parse_();
                  s12 = peg$parseCNUM();
                  if (s12 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 125) {
                      s13 = peg$c22;
                      peg$currPos++;
                    } else {
                      s13 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e5); }
                    }
                    if (s13 !== peg$FAILED) {
                      s14 = peg$parse_();
                      peg$savedPos = s0;
                      s0 = peg$f176(s3, s6, s9, s12);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCNUM255() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 125 + 108;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s2 = peg$c72;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$currPos;
      if (peg$r16.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e59); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$currPos;
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s5 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s5 !== peg$FAILED) {
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s5 = [s5, s6];
          s4 = s5;
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f177(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f178(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCNUM() {
    var s0, s1, s2, s3, s4, s5, s6;

    var key = peg$currPos * 125 + 109;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s3 = peg$c72;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e58); }
    }
    if (s3 === peg$FAILED) {
      s3 = null;
    }
    if (input.charCodeAt(peg$currPos) === 46) {
      s4 = peg$c73;
      peg$currPos++;
    } else {
      s4 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e60); }
    }
    if (s4 !== peg$FAILED) {
      s5 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s6 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s6 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s6 !== peg$FAILED) {
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          if (peg$r2.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
        }
      } else {
        s5 = peg$FAILED;
      }
      if (s5 !== peg$FAILED) {
        s3 = [s3, s4, s5];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f179(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$currPos;
      if (peg$r17.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e61); }
      }
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c73;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e60); }
        }
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f180(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_SINGLE_MACRO() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 110;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f181(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f182(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c45;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e31); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f183(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_BOND() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 111;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f184(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f185(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_MACRO_1P() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 112;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f186(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f187(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_MACRO_2P() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 113;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f188(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f189(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_MACRO_2PU() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 114;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f190(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f191(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_MACRO_2PC() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 115;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parsegeneric_func();
    if (s1 !== peg$FAILED) {
      peg$savedPos = peg$currPos;
      s2 = peg$f192(s1);
      if (s2) {
        s2 = undefined;
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f193(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_SCRIPT_FOLLOW() {
    var s0;

    var key = peg$currPos * 125 + 116;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$parseliteral_mn();
    if (s0 === peg$FAILED) {
      s0 = peg$parseliteral_id();
      if (s0 === peg$FAILED) {
        if (peg$r18.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e62); }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_SUPERSUB() {
    var s0;

    var key = peg$currPos * 125 + 117;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 95) {
      s0 = peg$c40;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 94) {
        s0 = peg$c37;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_BOND_TYPE() {
    var s0;

    var key = peg$currPos * 125 + 118;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (input.charCodeAt(peg$currPos) === 61) {
      s0 = peg$c74;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e63); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 35) {
        s0 = peg$c75;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e64); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c76) {
          s0 = peg$c76;
          peg$currPos += 3;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e65); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c77) {
            s0 = peg$c77;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e66); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c78) {
              s0 = peg$c78;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e67); }
            }
            if (s0 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 126) {
                s0 = peg$c79;
                peg$currPos++;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e68); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c80) {
                  s0 = peg$c80;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e69); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c81) {
                    s0 = peg$c81;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e70); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c82) {
                      s0 = peg$c82;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e71); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 2) === peg$c83) {
                        s0 = peg$c83;
                        peg$currPos += 2;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e72); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c84) {
                          s0 = peg$c84;
                          peg$currPos += 2;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e73); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.charCodeAt(peg$currPos) === 45) {
                            s0 = peg$c42;
                            peg$currPos++;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e29); }
                          }
                          if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 49) {
                              s0 = peg$c85;
                              peg$currPos++;
                            } else {
                              s0 = peg$FAILED;
                              if (peg$silentFails === 0) { peg$fail(peg$e74); }
                            }
                            if (s0 === peg$FAILED) {
                              if (input.charCodeAt(peg$currPos) === 50) {
                                s0 = peg$c86;
                                peg$currPos++;
                              } else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) { peg$fail(peg$e75); }
                              }
                              if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 51) {
                                  s0 = peg$c87;
                                  peg$currPos++;
                                } else {
                                  s0 = peg$FAILED;
                                  if (peg$silentFails === 0) { peg$fail(peg$e76); }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseBEGIN_MATH() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 119;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseBEGIN();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c88) {
        s2 = peg$c88;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEND_MATH() {
    var s0, s1, s2, s3;

    var key = peg$currPos * 125 + 120;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    s1 = peg$parseEND();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c88) {
        s2 = peg$c88;
        peg$currPos += 6;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e77); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parse_();
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_LETTER() {
    var s0;

    var key = peg$currPos * 125 + 121;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseCHEM_NONLETTER() {
    var s0, s1, s2;

    var key = peg$currPos * 125 + 122;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f194(s1);
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c89) {
        s1 = peg$c89;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e78); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f195(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c47) {
          s1 = peg$c47;
          peg$currPos += 2;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f196(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (peg$r19.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e79); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f197(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseliteral_mn();
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f198(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              s1 = peg$parseCURLY_OPEN();
              if (s1 !== peg$FAILED) {
                s2 = peg$parseCURLY_CLOSE();
                if (s2 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f199();
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            }
          }
        }
      }
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseimpossible() {
    var s0;

    var key = peg$currPos * 125 + 123;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$savedPos = peg$currPos;
    s0 = peg$f200();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }

  function peg$parseEOF() {
    var s0;

    var key = peg$currPos * 125 + 124;
    var cached = peg$resultsCache[key];

    if (cached) {
      peg$currPos = cached.nextPos;

      return cached.result;
    }

    peg$savedPos = peg$currPos;
    s0 = peg$f201();
    if (s0) {
      s0 = undefined;
    } else {
      s0 = peg$FAILED;
    }

    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };

    return s0;
  }


    const Box = require("./nodes/box");
    const Big = require("./nodes/big");
    const ChemFun2u = require("./nodes/chemFun2u");
    const ChemWord = require("./nodes/chemWord");
    const Curly = require("./nodes/curly");
    const Declh = require("./nodes/declh");
    const Dollar = require("./nodes/dollar");
    const Dq = require("./nodes/dq");
    const Fq = require("./nodes/fq");
    const Fun1 = require("./nodes/fun1");
    const Fun1nb = require("./nodes/fun1nb");
    const Fun2 = require("./nodes/fun2");
    const Fun2nb = require("./nodes/fun2nb");
    const Fun2sq = require("./nodes/fun2sq");
    const Infix = require("./nodes/infix");
    const Literal = require("./nodes/literal");
    const Lr = require('./nodes/lr');
    const Matrix = require("./nodes/matrix");
    const Mhchem = require("./nodes/mhchem");
    const Uq = require("./nodes/uq");
  const TexArray = require( './nodes/texArray');

    const tu = require('./texutil');
  const assert = require('assert');

  const lst2arr = function(l) {
      const arr = new TexArray();
      while (l !== null && typeof l !== 'undefined') {
          if (typeof  l.first() !== 'undefined' ) {
            arr.push(l.first());
        }
      l = l.second();
    }
    return arr;
  };

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
